/*
 * Copyright (C) 2015 Marcos Vives Del Sol
 * Copyright (C) 2016 Benjamin Krämer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

using System;
using LibAmiibo.Encryption;

namespace amiitool
{
    class ZeroTest
    {
        private static readonly KeygenMasterkeys ZERO_KEYS = new KeygenMasterkeys {
            hmacKey = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            typeString = "\0",
            rfu = 0,
            magicBytesSize = 16,
            magicBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            xorPad = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            }
        };

        private static readonly byte[] ZERO_SEED = new byte[]
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        // Output from NFC module running under QEMU
        private static readonly KeygenDerivedkeys ZERO_CONSOLE_OUTPUT = new KeygenDerivedkeys {
            aesKey = new byte[] { 0xEB, 0x65, 0xC3, 0x24, 0x0A, 0xFD, 0x1A, 0x0C, 0x0B, 0x98, 0xCF, 0xB7, 0xF0, 0x03, 0x56, 0xFB },
            aesIV = new byte[] { 0x95, 0xE4, 0xC0, 0xF4, 0xE2, 0x60, 0x32, 0x7D, 0xAA, 0x47, 0xDC, 0xE8, 0x43, 0x4B, 0x7E, 0xCF },
            hmacKey = new byte[] { 0x2F, 0xF1, 0xF1, 0x2B, 0x5B, 0x19, 0x26, 0x35, 0x22, 0xFA, 0x9D, 0xFB, 0xA1, 0x7B, 0xF3, 0x8A }
        };

        public static int Test()
        {
            KeygenDerivedkeys outkeys = ZERO_KEYS.GenerateKey(ZERO_SEED);
            
            Console.Write("Matches console: ");
            Console.WriteLine(Equals(ZERO_CONSOLE_OUTPUT, outkeys) ? "YES" : "NO");

            return 0;
        }
    }
}
